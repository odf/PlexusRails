- title "Dataset <em>#{breakable(@data_node.suffix)}</em>".html_safe
- stylesheet :properties, :datasets
- time_options = { :mode => :sortable, :zone => true }

%p
  %b Project:
  = link_to @project.name, @project
  &mdash;
  %b Sample:
  = @data_node.sample

%h2
  Properties:
  %span.action-links
    - if @data_node.hideable?
      - text = @data_node.hidden ? "Unhide" : "Hide"
      - url = toggle_project_data_node_url(@project, @data_node)
      = link_to text, url, :method => :put
.properties
  %ul
    %li
      %dfn Full Name
      = breakable(@data_node.name || "")
    %li
      %dfn External ID
      = breakable(@data_node.identifier || "")
    %li
      %dfn Type
      = (@data_node.data_type || "").underscore.humanize
    %li
      %dfn Process
      = (@data_node.producer.data_type || "").underscore.humanize
    %li
      %dfn Data created
      = format_time(@data_node.date, time_options)
    - unless @data_node.producer.run_by.blank?
      %li
        %dfn Operator
        = @data_node.producer.run_by
    - if @data_node.filename.blank?
      %li
        %dfn Data stored
        no
    - else
      %li
        %dfn Data stored
        - if @data_node.synchronized_at.blank?
          at unknown time
        - else
          = format_time(@data_node.synchronized_at, time_options)
      - unless @data_node.name == @data_node.filename
        %li
          %dfn File name
          - if @data_node.filename.blank?
            &mdash;
          - else
            = @data_node.filename

- if @data_node.domain
  %h2 Domain:
  = render :partial => "domain", :object => @data_node.domain

= render :partial => "comments/on_object", :object => @data_node

%h2 Full History Entry:
.collapsible
  %tt
    %small
      %pre.comment= h(@data_node.producer.history)
.clear

- unless @data_node.predecessors.empty?
  %hr/
  %h2 Predecessors:
= render :partial => "dataset", :locals => { :level => 0 }, |
         :collection => @data_node.predecessors.resolved |
- unless @data_node.predecessors.missing.empty?
  %h4 Unresolved:
  %ul
- for v in @data_node.predecessors.missing
  %li= v.identifier || v.name
- unless @data_node.successors.empty?
  %hr/
  %h2 Successors:
= render :partial => "dataset", :locals => { :level => 0 }, |
         :collection => @data_node.successors |
