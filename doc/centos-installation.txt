# ==== Basics ====

# We assume for simplicity that there is a user plexus1 with sudo privileges
# for the duration of the installation process, and that the Plexus
# application will later be run from that same account.


# ==== Part I: Installing required software ====

# -- Install some basic necessary packages

sudo yum -y install gcc gcc-c++ curl git-core wget


# -- Install Ruby and Rubygems

sudo yum -y install rubygems ruby-devel


# -- Install and initialise PostgreSQL

sudo yum -y install postgresql-server postgresql-devel
sudo service postgresql initdb
sudo chkconfig --add postgresql
sudo chkconfig postgresql on


# -- Install Nginx via a non-standard repository

cat >/tmp/nginx.repo <<EOF
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/6/$basearch/
gpgcheck=0
enabled=1
EOF

sudo mv /tmp/nginx.repo /etc/yum.repos.d/nginx.repo
sudo yum -y nginx


# -- Install Node.js locally, i.e., for the account that executes the Rails
#    application

wget http://nodejs.org/dist/v0.10.3/node-v0.10.3-linux-x86.tar.gz"
tar xzf node-v0.10.3-linux-x86.tar.gz"
rm -f node-v0.10.3-linux-x86.tar.gz"
mkdir -p bin"
ln -nfs /home/plexus1/node-v0.10.3-linux-x86/bin/node /home/plexus1/bin/node"
echo 'export PATH=$PATH:/home/plexus1/bin' >>.bashrc"


# -- Install Bundler, also locally

gem install bundler --no-ri --no-rdoc


# ==== Part II: Initial setup for Rails and the Plexus application ====

# -- Set authentication policies for PostgreSQL

cat >/tmp/pg_hba.conf <<EOF
local all                postgres         ident
host  plexus1_production plexus1  ::1/128 md5
EOF

sudo chown postgres.postgres /tmp/pg_hba.conf
sudo chmod 600 /tmp/pg_hba.conf
sudo mv /tmp/pg_hba.conf /var/lib/pgsql/data/pg_hba.conf
sudo service postgresql restart


# -- For testing/staging: create a self-signed SSL certificate.  (When a
#    properly signed certificate is obtained, place .crt and .key files under
#    /home/plexus1/ssl.)

openssl req -new -nodes -keyout /tmp/ssl.key -out /tmp/ssl.csr <<EOF
AU
ACT
Canberra
The Australian National University
Research School of Physics and Engineering
Self-signed Plexus I SSL certificate for local testing



EOF

openssl x509 -req -days 365 -in /tmp/ssl.csr -signkey /tmp/ssl.key \
        -out /tmp/ssl.crt

mkdir -p /home/plexus1/ssl
mv -n /tmp/ssl.crt /home/plexus1/ssl/plexus1.crt
chmod 0400 /home/plexus1/ssl/plexus1.crt
mv -n /tmp/ssl.key /home/plexus1/ssl/plexus1.key
chmod 0400 /home/plexus1/ssl/plexus1.key
rm -f /tmp/ssl.txt /tmp/ssl.csr /tmp/ssl.crt /tmp/ssl.key


# -- Configure Nginx

chmod +x /home/plexus1
sudo mkdir -p /etc/nginx/sites-enabled
echo 'include /etc/nginx/sites-enabled/*;' >/tmp/nginx.conf
sudo mv /tmp/nginx.conf /etc/nginx/conf.d/default.conf

cat >/tmp/nginx_conf <<EOF
upstream unicorn {
  server unix:/tmp/unicorn.plexus1.sock fail_timeout=0;
}

server {
  listen 443 default deferred;

  ssl on;
  ssl_certificate /home/plexus1/ssl/plexus1.crt;
  ssl_certificate_key /home/plexus1/ssl/plexus1.key;

  root /home/plexus1/apps/plexus1/current/public;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  try_files $uri/index.html $uri @unicorn;
  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_set_header X-Forwarded-Proto https;

    proxy_redirect off;
    proxy_pass http://unicorn;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 4G;
  keepalive_timeout 10;
}
EOF

sudo mv /tmp/nginx_conf /etc/nginx/sites-enabled/plexus1
sudo rm -f /etc/nginx/sites-enabled/default
sudo service nginx restart


# -- Create directories for the Plexus application

mkdir -p /home/plexus1/apps/plexus1
cd /home/plexus1/apps/plexus1
mkdir -p releases shared shared/system shared/log shared/pids
mpdir -m 0700 -p shared/config shared/data


# -- Configure Unicorn

cat >/home/plexus1/apps/plexus1/shared/config/unicorn.rb <<EOF
working_directory "/home/plexus1/apps/plexus1/current"
pid "/home/plexus1/apps/plexus1/current/tmp/pids/unicorn.pid"
stderr_path "/home/plexus1/apps/plexus1/current/log/unicorn.log"
stdout_path "/home/plexus1/apps/plexus1/current/log/unicorn.log"

listen "/tmp/unicorn.plexus1.sock"
worker_processes 2
timeout 30
EOF

cat >/unicorn_init <<EOF
#!/bin/sh
### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage unicorn server
# Description:       Start, stop, restart unicorn server for a specific application.
### END INIT INFO
set -e

# Feel free to change any of the following variables for your app:
TIMEOUT=${TIMEOUT-60}
APP_ROOT=/home/plexus1/apps/plexus1/current
PID=/home/plexus1/apps/plexus1/current/tmp/pids/unicorn.pid
CMD="cd /home/plexus1/apps/plexus1/current; bundle exec unicorn -D -c /home/plexus1/apps/plexus1/current/config/unicorn.config -E production"
AS_USER=plexus1
set -u

OLD_PIN="$PID.oldbin"

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
  test -s $OLD_PIN && kill -$1 `cat $OLD_PIN`
}

run () {
  if [ "$(id -un)" = "$AS_USER" ]; then
    eval $1
  else
    su -c "$1" - $AS_USER
  fi
}

case "$1" in
start)
  sig 0 && echo >&2 "Already running" && exit 0
  run "$CMD"
  ;;
stop)
  sig QUIT && exit 0
  echo >&2 "Not running"
  ;;
force-stop)
  sig TERM && exit 0
  echo >&2 "Not running"
  ;;
restart|reload)
  sig HUP && echo reloaded OK && exit 0
  echo >&2 "Couldn't reload, starting '$CMD' instead"
  run "$CMD"
  ;;
upgrade)
  if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
  then
    n=$TIMEOUT
    while test -s $OLD_PIN && test $n -ge 0
    do
      printf '.' && sleep 1 && n=$(( $n - 1 ))
    done
    echo

    if test $n -lt 0 && test -s $OLD_PIN
    then
      echo >&2 "$OLD_PIN still exists after $TIMEOUT seconds"
      exit 1
    fi
    exit 0
  fi
  echo >&2 "Couldn't upgrade, starting '$CMD' instead"
  run "$CMD"
  ;;
reopen-logs)
  sig USR1
  ;;
*)
  echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
  exit 1
  ;;
esac
EOF

chmod +x /tmp/unicorn_init
sudo mv /tmp/unicorn_init /etc/init.d/unicorn_plexus1
sudo chkconfig --add unicorn_plexus1


# -- Create a Postgresql user and database for the application (insert your
     own password here).

sudo sudo -u postgres \
    psql -c "create user plexus1 with password '+AVleyujPNgHqg==';"
sudo sudo -u postgres \
    psql -c "create database plexus1_production owner plexus1;"


# -- Create a database configuration file to be used by Plexus (use the same
     password as above).

cat >/home/plexus1/apps/plexus1/shared/config/database.yml <<EOF
production:
  adapter: postgresql
  encoding: unicode
  database: plexus1_production
  pool: 5
  username: plexus1
  password: '+AVleyujPNgHqg=='
  host: localhost
EOF


# -- Create a file with a secret connection token for Plexus (use a fairly
     long random string).

cat >/home/plexus1/apps/plexus1/shared/secret_token.rb <<EOF
Rails.application.config.secret_token = "ef04aa01c7ea61faa2bab019da7ec7c8bf889c"
EOF

chmod 0600 /home/plexus1/apps/plexus1/shared/secret_token.rb
