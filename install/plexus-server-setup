# ----------------------------------------------------------------------
# System setup for the Plexus web application.
#
# These commands need to be executed from a root account or via sudo.
# ----------------------------------------------------------------------

# -- Create a user account plexus1 to run the application under

id plexus1 >/dev/null 2>&1 || (
   adduser --home=/home/plexus1 --shell=/bin/bash plexus1
   chmod +x /home/plexus1
)

# -- Install some basic necessary packages

yum -y install gcc gcc-c++ git-core wget


# -- Install Ruby and Rubygems

yum -y install rubygems ruby-devel


# -- Install Bundler

gem install bundler --no-ri --no-rdoc


# -- Install and configure PostgreSQL

yum -y install postgresql-server postgresql-devel
service postgresql initdb
chkconfig --add postgresql
chkconfig postgresql on

cat >/tmp/pg_hba.conf <<EOF
local all                postgres         ident
host  plexus1_production plexus1  ::1/128 md5
EOF

chown postgres.postgres /tmp/pg_hba.conf
chmod 600 /tmp/pg_hba.conf
mv /tmp/pg_hba.conf /var/lib/pgsql/data/pg_hba.conf
service postgresql restart

sudo -u postgres psql -c "select 1 from pg_roles where rolname='plexus1'" | grep -q 1 || (
    PASSWD=`ruby -r securerandom -e 'puts SecureRandom.base64(10)'`
    echo $PASSWD >/home/plexus1/db_passwd
    chmod 0400 /home/plexus1/db_passwd
    chown plexus1.plexus1 /home/plexus1/db_passwd

    sudo -u postgres psql -c "create user plexus1 with password '$PASSWD';"
)

sudo -u postgres psql -c "select 1 from pg_database where datname='plexus1_production'" | grep -q 1 ||
    sudo -u postgres psql -c "create database plexus1_production owner plexus1;"


# -- For testing/staging: create a self-signed SSL certificate.
#
#    When a properly signed certificate is available, place the corresponding
#    .crt and .key files under /home/plexus1/ssl and restart nginx.

[ -e /home/plexus1/ssl/plexus1.crt ] || (
    openssl req -new -nodes -keyout /tmp/ssl.key -out /tmp/ssl.csr <<EOF
AU
ACT
Canberra
The Australian National University
Research School of Physics and Engineering
Self-signed Plexus I SSL certificate for local testing



EOF

    openssl x509 -req -days 365 -in /tmp/ssl.csr -signkey /tmp/ssl.key \
            -out /tmp/ssl.crt

    chmod 0400 /tmp/ssl.crt
    chown plexus1.plexus1 /tmp/ssl.crt
    chmod 0400 /tmp/ssl.key
    chown plexus1.plexus1 /tmp/ssl.key
    mkdir -p /home/plexus1/ssl
    chown plexus1.plexus1 /home/plexus1/ssl
    mv -n /tmp/ssl.crt /home/plexus1/ssl/plexus1.crt
    mv -n /tmp/ssl.key /home/plexus1/ssl/plexus1.key
    rm -f /tmp/ssl.txt /tmp/ssl.csr /tmp/ssl.crt /tmp/ssl.key
)

# -- Install and configure Nginx

cat >/tmp/nginx.repo <<EOF
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/6/\$basearch/
gpgcheck=0
enabled=1
EOF

mv /tmp/nginx.repo /etc/yum.repos.d/nginx.repo
yum -y install nginx

mkdir -p /etc/nginx/sites-enabled
echo 'include /etc/nginx/sites-enabled/*;' >/tmp/nginx.conf
mv /tmp/nginx.conf /etc/nginx/conf.d/default.conf

cat >/tmp/nginx_conf <<EOF
upstream unicorn {
  server unix:/tmp/unicorn.plexus1.sock fail_timeout=0;
}

server {
  listen 443 default deferred;

  ssl on;
  ssl_certificate /home/plexus1/ssl/plexus1.crt;
  ssl_certificate_key /home/plexus1/ssl/plexus1.key;

  root /home/plexus1/apps/plexus1/current/public;

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  try_files \$uri/index.html \$uri @unicorn;
  location @unicorn {
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header Host \$http_host;

    proxy_set_header X-Forwarded-Proto https;

    proxy_redirect off;
    proxy_pass http://unicorn;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 4G;
  keepalive_timeout 10;
}
EOF

mv /tmp/nginx_conf /etc/nginx/sites-enabled/plexus1
rm -f /etc/nginx/sites-enabled/default
service nginx restart


# -- Configure Unicorn

cat >/tmp/unicorn_init <<EOF
#!/bin/sh
### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    \$remote_fs \$syslog
# Required-Stop:     \$remote_fs \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage unicorn server
# Description:       Start, stop, restart unicorn server for a specific application.
### END INIT INFO
set -e

# Feel free to change any of the following variables for your app:
TIMEOUT=\${TIMEOUT-60}
APP_ROOT=/home/plexus1/apps/plexus1/current
PID=/home/plexus1/apps/plexus1/current/tmp/pids/unicorn.pid
CMD="cd /home/plexus1/apps/plexus1/current; bundle exec unicorn -D -c /home/plexus1/apps/plexus1/current/config/unicorn.rb -E production"
AS_USER=plexus1
set -u

OLD_PIN="\$PID.oldbin"

sig () {
  test -s "\$PID" && kill -\$1 \`cat \$PID\`
}

oldsig () {
  test -s \$OLD_PIN && kill -\$1 \`cat \$OLD_PIN\`
}

run () {
  if [ "\$(id -un)" = "\$AS_USER" ]; then
    eval \$1
  else
    su -c "\$1" - \$AS_USER
  fi
}

case "\$1" in
start)
  sig 0 && echo >&2 "Already running" && exit 0
  run "\$CMD"
  ;;
stop)
  sig QUIT && exit 0
  echo >&2 "Not running"
  ;;
force-stop)
  sig TERM && exit 0
  echo >&2 "Not running"
  ;;
restart|reload)
  sig HUP && echo reloaded OK && exit 0
  echo >&2 "Couldn't reload, starting '\$CMD' instead"
  run "\$CMD"
  ;;
upgrade)
  if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
  then
    n=\$TIMEOUT
    while test -s \$OLD_PIN && test \$n -ge 0
    do
      printf '.' && sleep 1 && n=\$(( \$n - 1 ))
    done
    echo

    if test \$n -lt 0 && test -s \$OLD_PIN
    then
      echo >&2 "\$OLD_PIN still exists after \$TIMEOUT seconds"
      exit 1
    fi
    exit 0
  fi
  echo >&2 "Couldn't upgrade, starting '\$CMD' instead"
  run "\$CMD"
  ;;
reopen-logs)
  sig USR1
  ;;
*)
  echo >&2 "Usage: \$0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
  exit 1
  ;;
esac
EOF

chmod +x /tmp/unicorn_init
mv /tmp/unicorn_init /etc/init.d/unicorn_plexus1
chkconfig --add unicorn_plexus1
